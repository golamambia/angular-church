import { Injectable, Component, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function AlertsComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 3);
    ɵngcc0.ɵɵelementStart(2, "i", 4);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 5);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 6);
    ɵngcc0.ɵɵelementStart(7, "a", 7);
    ɵngcc0.ɵɵlistener("click", function AlertsComponent_div_2_Template_a_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r3); const message_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.removeMessage(message_r1); });
    ɵngcc0.ɵɵtext(8, "X");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const message_r1 = ctx.$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("alertsRow ", message_r1.type, "");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(message_r1.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(message_r1.message);
} }
var /** @type {?} */ AlertsConfigData = {};
AlertsConfigData["error"] = {
    icon: 'error'
};
AlertsConfigData["success"] = {
    icon: 'done'
};
AlertsConfigData["DefaultSettings"] = {
    icon: 'error',
    timeout: 3
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AlertsService {
    constructor() {
        // Observable alerts
        this.alertsSubject = new Subject();
    }
    /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    setMessage(message, type) {
        this.alertsSubject.next({ message: message, type: type });
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.alertsSubject.asObservable();
    }
    /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    getConfig(messagetype, key) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            return AlertsConfigData["DefaultSettings"][key];
        }
        else {
            return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key] : AlertsConfigData["DefaultSettings"][key];
        }
    }
    /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setConfig(messagetype, key, value) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            AlertsConfigData[messagetype] = {};
        }
        AlertsConfigData[messagetype][key] = value;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setDefaults(key, value) {
        AlertsConfigData["DefaultSettings"][key] = value;
    }
}
AlertsService.ɵfac = function AlertsService_Factory(t) { return new (t || AlertsService)(); };
AlertsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AlertsService, factory: AlertsService.ɵfac });
/** @nocollapse */
AlertsService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlertsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AlertsComponent {
    /**
     * @param {?} alerts
     */
    constructor(alerts) {
        this.alerts = alerts;
        this.messages = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.alerts.getSubject().subscribe((object) => {
            object["icon"] = this.alerts.getConfig(object.type, 'icon');
            this.timeout = this.alerts.getConfig(object.type, 'timeout');
            console.log('this.timeout', this.timeout);
            this.messages.push(object);
            if (this.timeout > 0) {
                setTimeout(() => {
                    this.removeMessage(object);
                }, this.timeout * 1000);
            }
        });
    }
    /**
     * @param {?} message
     * @return {?}
     */
    removeMessage(message) {
        this.messages.splice(this.messages.indexOf(message), 1);
    }
}
AlertsComponent.ɵfac = function AlertsComponent_Factory(t) { return new (t || AlertsComponent)(ɵngcc0.ɵɵdirectiveInject(AlertsService)); };
AlertsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AlertsComponent, selectors: [["app-alerts"]], decls: 3, vars: 1, consts: [["href", ɵngcc0.ɵɵtrustConstantResourceUrl("https://fonts.googleapis.com/icon?family=Material+Icons"), "rel", "stylesheet"], [1, "alertsContainer"], [3, "class", 4, "ngFor", "ngForOf"], [1, "iconpanel"], [1, "mat-icon", "material-icons"], [1, "messagepanel"], [1, "closeicon"], ["href", "#", 3, "click"]], template: function AlertsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "link", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, AlertsComponent_div_2_Template, 9, 5, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.messages);
    } }, directives: [ɵngcc1.NgForOf], styles: [".alertsContainer[_ngcontent-%COMP%]{position:absolute;top:10px;right:20px}.alertsContainer[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{padding-top:36%}.alertsContainer[_ngcontent-%COMP%]   .alertsRow[_ngcontent-%COMP%]{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer[_ngcontent-%COMP%]   .alertsRow[_ngcontent-%COMP%]   .iconpanel[_ngcontent-%COMP%]{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer[_ngcontent-%COMP%]   .alertsRow[_ngcontent-%COMP%]   .messagepanel[_ngcontent-%COMP%]{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer[_ngcontent-%COMP%]   .alertsRow[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer[_ngcontent-%COMP%]   .alertsRow[_ngcontent-%COMP%]:hover   .closeicon[_ngcontent-%COMP%]{display:block}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.error[_ngcontent-%COMP%]{border:1px solid #d80202}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.error[_ngcontent-%COMP%]   .iconpanel[_ngcontent-%COMP%]{background:#d80202}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.error[_ngcontent-%COMP%]   .messagepanel[_ngcontent-%COMP%]{color:#000;background:#fff}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.error[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]{color:#000}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.error[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#000;text-decoration:none;font-size:12px}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.success[_ngcontent-%COMP%]{border:1px solid #27b235}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.success[_ngcontent-%COMP%]   .iconpanel[_ngcontent-%COMP%]{background:#27b235;color:#fff}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.success[_ngcontent-%COMP%]   .messagepanel[_ngcontent-%COMP%]{color:#000;background:#fff}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.success[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]{color:#000}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.success[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#000;text-decoration:none;font-size:12px}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.warn[_ngcontent-%COMP%]{border:1px solid #ffc549}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.warn[_ngcontent-%COMP%]   .iconpanel[_ngcontent-%COMP%]{background:#ffc549;color:#fff}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.warn[_ngcontent-%COMP%]   .messagepanel[_ngcontent-%COMP%]{color:#000;background:#fff}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.warn[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]{color:#000}.alertsContainer[_ngcontent-%COMP%]   .alertsRow.warn[_ngcontent-%COMP%]   .closeicon[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#000;text-decoration:none;font-size:12px}"] });
/** @nocollapse */
AlertsComponent.ctorParameters = () => [
    { type: AlertsService, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlertsComponent, [{
        type: Component,
        args: [{
                selector: 'app-alerts',
                template: `<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<div  class="alertsContainer">
	<div class="alertsRow {{message.type}}" *ngFor="let message of messages">
		<div class="iconpanel"><i class="mat-icon material-icons">{{message.icon}}</i></div>
		<div class="messagepanel">{{message.message}}</div>
		<div class="closeicon"><a (click)="removeMessage(message)" href="#">X</a></div>
  	</div>
</div>`,
                styles: [`.alertsContainer{position:absolute;top:10px;right:20px}.alertsContainer .material-icons{padding-top:36%}.alertsContainer .alertsRow{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer .alertsRow .iconpanel{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer .alertsRow .messagepanel{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer .alertsRow .closeicon{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer .alertsRow:hover .closeicon{display:block}.alertsContainer .alertsRow.error{border:1px solid #d80202}.alertsContainer .alertsRow.error .iconpanel{background:#d80202}.alertsContainer .alertsRow.error .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.error .closeicon{color:#000}.alertsContainer .alertsRow.error .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.success{border:1px solid #27b235}.alertsContainer .alertsRow.success .iconpanel{background:#27b235;color:#fff}.alertsContainer .alertsRow.success .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.success .closeicon{color:#000}.alertsContainer .alertsRow.success .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.warn{border:1px solid #ffc549}.alertsContainer .alertsRow.warn .iconpanel{background:#ffc549;color:#fff}.alertsContainer .alertsRow.warn .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.warn .closeicon{color:#000}.alertsContainer .alertsRow.warn .closeicon a{color:#000;text-decoration:none;font-size:12px}`]
            }]
    }], function () { return [{ type: AlertsService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AlertsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AlertsModule,
            providers: [AlertsService]
        };
    }
}
AlertsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AlertsModule });
AlertsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AlertsModule_Factory(t) { return new (t || AlertsModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AlertsModule, { declarations: function () { return [AlertsComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AlertsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlertsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    AlertsComponent
                ],
                exports: [
                    AlertsComponent
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AlertsService, AlertsComponent, AlertsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,